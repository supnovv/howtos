
VIM
---

http://vimdoc.sourceforge.net/
https://www.fprintf.net/vimCheatSheet.html

Windows 10 Linux Subsystem
--------------------------

## 系统目录和磁盘映射目录

C:\Users\<username>\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs
Windows 下的磁盘映射在子系统 /mnt/c/ /mnt/d/ ... 等目录下

## 安装 gcc arm 开发环境

sudo apt-get install make
make --version

https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads
tar jxvf gcc-arm-none-eabi-4_9-2015q3-20150921-linux.tar.bz2

## 命令行多屏幕

sudo apt-get install screen
sudo screen
ctrl+a ?   -   get help
ctrl+a c   -   create new window
ctrl+a k   -   kill a window
ctrl+a w   -   show current windows
ctrl+a n   -   next window
ctrl+a p   -   previous window
ctrl+a 0   -   select the 0-window
ctrl+a 1   -   select the 1-window

GCC Debugging
-------------

$ gdb -q program   # use gdb to start the program
(gdb) li 1,n       # list source file lines
(gdb) b 2          # set break point at line 2
(gdb) b 10         # set break point at line 10
(gdb) func         # set break at the the function
(gdb) run          # run the code, it will be stop at break points
(gdb) info locals  # check function local variables
(gdb) bt           # check backtrack
(gdb) x/s 0x423580 # check the string at 0x423580
(gdb) quit         # quit gdb

> cheat.sh/gdb

Ubuntu 18.04 LTS
----------------

## ssh
ps -ef | grep ssh
/etc/init.d/ssh start

mkdir folder
cd folder
mkdir repo
curl https://storage.googleapis.com/git-repo-downloads/repo > repo/repo
chmod a+x repo/repo
add "export PATH=~/folder/repo/:$PATH" to the end of the file ~/.bashrc
source ~/.bashrc
apt-get update
apt-get install python
attach new volume
mkfs.ext4 /dev/disk/by-id/new_volume_name
mkdir /mnt/mount_name
mount /dev/disk/by-id/new_volume_name /mnt/mount_name
add "/dev/disk/by-id/new_volume_name /mnt/mount_name ext4 defaults 0 2" into the end of the file /etc/fstab
cd path/to/your/working_directory
mkdir code/nexusvx_oreo/android-8.1.0_r27
cd code/nexusvx_oreo/android-8.1.0_r27
git config --global user.name your-name
git config --global user.email your-email
repo init -u https://android.googlesource.com/platform/manifest -b android-8.1.0_r27
repo sync
wget https://dl.google.com/dl/android/aosp/lge-bullhead-opm4.171019.016.a1-6ca0caeb.tgz
wget https://dl.google.com/dl/android/aosp/qcom-bullhead-opm4.171019.016.a1-adcef468.tgz
tar -zxvf lge-bullhead-opm4.171019.016.a1-6ca0caeb.tgz
tar -zxvf qcom-bullhead-opm4.171019.016.a1-adcef468.tgz
./extract-lge-bullhead.sh
./extract-qcom-bullhead.sh
apt-get install make
make clobber
apt-get install openjdk-8-jdk
update-alternatives --list java
update-alternatives --config java
update-alternatives --config javac
java -version
. build/envsetup.sh
lunch
Which would you like? [aosp_arm-eng] aosp_bullhead-userdebug
make -j4


Compress and extract
--------------------

=> tar
   -c    create a new archive
   -r    append new files to the end of an archive
   -u    only append files newer than copy in archive
   -x    extract files from an archive
   -t    list the contents of an archive
   -p    extract files with the same file permissions
   -z    filter the archive through gzip
   -j    filter the archive through bzip2
   -v    verbosely list files processed
   -f    specify the file name

tar -czvf archive.tgz file1 file2   # create archive.tgz from files
tar -czvf archive.tgz folder/       # create archive.tgz from folder
tar -xzvf archive.tgz               # extract the archive.tgz to current folder
tar -rzvf archive.tgz file3         # append new files
tar -uzvf archive.tgz file2         # update exist files

tar jxvf file.tar.bz2

zip dest.zip file1 file2 file3  # compress specified files
zip dest.zip -r folder/         # compress all files in folder
unzip dest.zip                  # extract to current folder
unzip dest.zip -d folder/       # extract to specified folder


Networking
----------

apt-get install shadowsocks-libev
kill `pgrep ss-server | tr "\n" " "`
ss-server -p port -k password -m aes-256-cfb -t 120 -f ~/ss-server.pid
pgrep ss-server


Disk
----

df -hl  # show human (-h) readable info about the local (-l) file systems
du -hd 1            # show files and folders size only under current folder
du -h folder/file   # show the size of the file
du -h folder/       # show the size of all files and all folders in the folder
du -h folder/ -d 1  # only for first depth files and folders

Java
----

Install Oracle Java 1.8

$ sudo add-apt-repository ppa:webupd8team/java
$ sudo apt-get update
$ apt-cache pkgnames oracle-java
oracle-java8-unlimited-jce-policy
oracle-java8-set-default
oracle-java8-installer
$ sudo apt-get install oracle-java8-installer
$ sudo apt-get install oracle-java8-set-default

Check Java Information

$ sudo update-alternatives --list java
/usr/lib/jvm/java-8-oracle/jre/bin/java
$ java -version
java version "1.8.0_191"
Java(TM) SE Runtime Environment (build 1.8.0_191-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)
$ sudo update-alternatives --config java
$ sudo update-alternatives --config javac

Setup Java Environment

$ vi ~/.bashrc
JAVA_HOME=/usr/lib/jvm/java-8-oracle
JRE_HOME=$JAVA_HOME/jre
JAVA_BIN=$JAVA_HOME/bin
CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib
PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin
export JAVA_HOME JRE_HOME PATH CLASSPATH

Tomcat
------

$ mkdir tomcat8
$ wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.35/bin/apache-tomcat-8.5.35.tar.gz
$ tar -zxvf apache-tomcat-8.5.35.tar.gz
$ mv apache-tomcat-8.5.35 apache-tomcat-home
$ vi ~/.bashrc
export CATALINA_HOME=path/to/tomcat8/apache-tomcat-home
$ . ~/.bashrc
$ ./apache-tomcat-home/bin/configtest.sh  # check configures
Using CATALINA_BASE:   path/to/tomcat8/apache-tomcat-home
Using CATALINA_HOME:   path/to/tomcat8/apache-tomcat-home
Using CATALINA_TMPDIR: path/to/tomcat8/apache-tomcat-home/temp
Using JRE_HOME:        /usr/lib/jvm/java-8-oracle/jre

$ ./apache-tomcat-8.5.35/bin/configtest.sh  # check configures
$ ./apache-tomcat-home/bin/startup.sh
$ ./apache-tomcat-home/bin/shutdown.sh

w3m - command line broswer
--------------------------

$ sudo apt-install w3m w3m-img
$ sudo /etc/init.d/tomcat8 start
$ w3m http://localhost:8080
It works !

OpenGrok
--------

* https://github.com/oracle/opengrok/wiki/How-to-setup-OpenGrok
* https://github.com/oracle/opengrok/wiki/Webapp-configuration
* https://github.com/oracle/opengrok/releases

$ mkdir universal-ctags
$ cd universal-ctags
$ git clone https://github.com/universal-ctags/ctags.git
$ cd ctags
$ sudo apt-get install autoconf
$ sudo apt-get install automake
$ sudo apt-get install libtool
$ sudo apt-get install pkg-config
$ ./autogen.sh
$ ./configure
$ make
$ make install
$ which ctags
/usr/local/bin/ctags

$ mkdir opengrok
$ cd opengrok
$ wget https://github.com/oracle/opengrok/releases/download/1.1-rc75/opengrok-1.1-rc75.tar.gz
$ tar -zxvf opengrok-1.1-rc75.tar.gz
$ mv opengrok-1.1-rc75 opengrok-home
$ mkdir -p opengrok-home/groksrc
$ mkdir -p opengrok-home/grokdata
$ vi ~/.bashrc
export OPENGROK_SRC_ROOT=~/artwork/opengrok/opengrok-home/groksrc
export OPENGROK_DATA_ROOT=~/artwork/opengrok/opengrok-home/grokdata
export OPENGROK_TOMCAT_BASE=~/artwork/tomcat8/apache-tomcat-home

$ sudo apt-get install python3 pyton3-pip
$ python3 -m pip install opengrok-1.1-rc75/tools/opengrok-tools.tar.gz
$ which opengrok
/usr/local/bin/opengrok
$ mkdir -p grokbase/src
$ mkdir -p grokbase/data
$ /usr/share/tomcat8/bin/catalina.sh configtest
Using CATALINA_BASE:   /usr/share/tomcat8
Using CATALINA_HOME:   /usr/share/tomcat8
Using CATALINA_TMPDIR: /usr/share/tomcat8/temp
Using JRE_HOME:        /usr/lib/jvm/java-8-oracle/jre
Using CLASSPATH:       /usr/share/tomcat8/bin/bootstrap.jar:/usr/share/tomcat8/bin/tomcat-juli.jar
$ vi ~/.bashrc
export CATALINA_HOME=/usr/share/tomcat8
export OPENGROK_TOMCAT_BASE=$CATALINA_HOME
export OPENGROK_INSTANCE_BASE=path/to/opengrok/grokbase

